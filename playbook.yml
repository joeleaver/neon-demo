- hosts: localhost
  tasks:
    - include_vars: environment.yml.local
    - name: build docker image
      docker_image:
        path: "{{ docker_image_path }}"
        name: "{{ docker_image_name }}" 
        tag: "{{ docker_image_tag }}"
        state: build

    - name: login to DockerHub
      docker_login:
        username: '{{ dockerhub_username }}'
        password: '{{ dockerhub_password }}'
        email: '{{ dockerhub_email }}'

    - name: push docker image to repo
      shell: "docker push {{ docker_image_name }}"  # docker push is supported by the docker ansible module in 2.1!
                                              # if you really didn't want to use a repo -- and really, you should have a private repo if you're using a lot of docker --
                                              # you could docker save -> ssh -> docker load 

    - name: generate ec2 keypair
      ec2_key:
        region: 'us-west-2'
        name: neon-demo-key
        key_material: "{{ item }}"
      with_file: ~/.ssh/id_rsa.pub

    - name: create security group
      ec2_group:
        name: 'neon-demo'
        description: security group for neon-demo
        region: 'us-west-2'
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: build ec2 instance
      ec2:
         region: 'us-west-2'
         instance_type: t2.micro
         image: ami-9abea4fb
         key_name: neon-demo-key
         wait: true
         group: 'neon-demo'
         exact_count: 1
         count_tag:
            Name: neon-demo
         instance_tags:
            Name: neon-demo
      register: ec2

    - name: add instances to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: ec2.instances   

    - name: wait for ssh
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: ec2.instances      

- hosts: ec2hosts     # In real life, use dynamic inventory/tags
  gather_facts: true
  user: ubuntu
  sudo: true
  tasks:
    - include_vars: environment.yml.local

    - name: install apt-transport-https
      apt:
        pkg: "apt-transport-https"
        state: installed

    - name: add docker repo key
      apt_key:
        id: "36A1D7869245C8950F966E92D8576A8BA88D21E9"
        keyserver: "hkp://keyserver.ubuntu.com:80"
        state: present

    - name: add docker repository and update apt cache
      apt_repository:
        repo: "deb http://get.docker.io/ubuntu docker main"
        update_cache: yes
        state: present

    - name: install lxc-docker
      apt:
        pkg: "lxc-docker"
        state: installed

    - name: install pip
      apt:
        pkg: "{{ item }}"
        state: installed
      with_items:
        - python-dev
        - python-pip

    - name: install docker-py
      pip:
        name: docker-py

    - name: start docker service
      service:
        name: docker
        state: started        

    - name: start docker image
      docker:
        docker_api_version: 1.21  # this is unfortunate -- need a way to detect/ensure
        image: "{{ docker_image_name }}:{{ docker_image_tag }}"
        command: "/home/neon/examples/mnist_mlp.py -v  --log=/neon-results/{{ neon_results_file }}"
        detach: false  # not ideal, but want this to finish before uploading results to s3 and e-mailing. In real life, write a wrapper, probably. 
        state: started
        volumes: "{{ neon_results_path }}:/neon-results/"

    - name: fetch results 
      fetch: 
         src: "{{ neon_results_path }}{{ neon_results_file }}" 
         dest: "/tmp/neon-demo-results.txt"
         flat: yes

    - name: clean up log file # seems clunky
      file:
        path: "{{ neon_results_path }}{{ neon_results_file }}"
        state: absent   

# we could really do these next steps remotely on the instance, but to do this correctly, you'd want to install and create a boto config
- hosts: localhost
  tasks:
    - include_vars: environment.yml.local

    - name: upload results to s3
      s3: 
        bucket: "{{ s3_bucket }}"
        object: "{{ s3_object }}"
        src: "/tmp/neon-demo-results.txt"
        mode: put

    - name: send confirmation email
      mail:
          host: "{{ smtp_host }}"
          port: "{{ smtp_port }}"
          username: "{{ smtp_username }}"
          password: "{{ smtp_password }}"
          to: "{{ email_to }}"
          subject: 'Training Complete'
          body: "Neon has completed training. Logs are also available at S3 Bucket: {{ s3_bucket }}, S3 Object: {{ s3_object }} "
          attach: "/tmp/neon-demo-results.txt"
     